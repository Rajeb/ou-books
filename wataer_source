
# Step 1: Function to extract raster data and return it as a DataFrame
def raster_to_dataframe(raster_path):
    with rasterio.open(raster_path) as src:
        raster_data = src.read(1)  # Reading the first band of the raster
        no_data_value = src.nodata
        transform = src.transform

        # Generate arrays of pixel coordinates (row, col) and filter no-data values
        rows, cols = np.where(raster_data != no_data_value)
        raster_values = raster_data[rows, cols]

        # Convert pixel (row, col) to lat/long using the transform
        lat_long_coords = np.array([src.transform * (col, row) for row, col in zip(rows, cols)])
        lats, lons = zip(*lat_long_coords)

        # Create a DataFrame with lat, lon, and raster values
        df_raster = pd.DataFrame({
            'latitude': lats,
            'longitude': lons,
            'raster_value': raster_values
        })

    return df_raster

# Step 2: Prepare your list of raster files
raster_files = ['raster1.tif', 'raster2.tif', 'raster3.tif']

# Step 3: Convert each raster file to a DataFrame and store it in a list
raster_dfs = []
for raster_path in raster_files:
    df_raster = raster_to_dataframe(raster_path)
    raster_dfs.append(df_raster)

# Step 4: Print the first few rows of one of the raster DataFrames
print(raster_dfs[0].head())  # This will print the first few rows of the first raster's DataFrame
