
t pandas as pd
from scipy.spatial import distance

# Function to filter raster based on a bounding box around the event location
def get_nearby_raster_values(lat, lon, src, buffer_distance=0.1):
    """
    Returns the raster values and their coordinates within a buffer around the given lat, lon.
    :param lat: Latitude of the event
    :param lon: Longitude of the event
    :param src: Opened rasterio object
    :param buffer_distance: Buffer distance (degrees) around the event location
    :return: DataFrame with nearby raster values and coordinates
    """
    # Get the raster's bounds in world coordinates
    minx, miny, maxx, maxy = src.bounds

    # Define the bounding box around the event
    left = lon - buffer_distance
    right = lon + buffer_distance
    bottom = lat - buffer_distance
    top = lat + buffer_distance

    # Ensure the bounding box does not exceed raster bounds
    left = max(left, minx)
    right = min(right, maxx)
    bottom = max(bottom, miny)
    top = min(top, maxy)

    # Get the pixel window that covers the bounding box
    row_start, col_start = src.index(left, top)
    row_stop, col_stop = src.index(right, bottom)

    # Read the subset of the raster data within the bounding box
    window = ((row_start, row_stop), (col_start, col_stop))
    raster_subset = src.read(1, window=window)

    # Get the coordinates of the pixels within the window
    rows, cols = np.where(raster_subset != src.nodata)
    raster_values = raster_subset[rows, cols]
    coords = [src.xy(row + row_start, col + col_start) for row, col in zip(rows, cols)]

    # Create a DataFrame with the coordinates and values
    raster_df = pd.DataFrame(coords, columns=['latitude', 'longitude'])
    raster_df['value'] = raster_values

    return raster_df













# Step 1: Function to extract raster data and return it as a DataFrame
def raster_to_dataframe(raster_path):
    with rasterio.open(raster_path) as src:
        raster_data = src.read(1)  # Reading the first band of the raster
        no_data_value = src.nodata
        transform = src.transform

        # Generate arrays of pixel coordinates (row, col) and filter no-data values
        rows, cols = np.where(raster_data != no_data_value)
        raster_values = raster_data[rows, cols]

        # Convert pixel (row, col) to lat/long using the transform
        lat_long_coords = np.array([src.transform * (col, row) for row, col in zip(rows, cols)])
        lats, lons = zip(*lat_long_coords)

        # Create a DataFrame with lat, lon, and raster values
        df_raster = pd.DataFrame({
            'latitude': lats,
            'longitude': lons,
            'raster_value': raster_values
        })

    return df_raster

# Step 2: Prepare your list of raster files
raster_files = ['raster1.tif', 'raster2.tif', 'raster3.tif']

# Step 3: Convert each raster file to a DataFrame and store it in a list
raster_dfs = []
for raster_path in raster_files:
    df_raster = raster_to_dataframe(raster_path)
    raster_dfs.append(df_raster)

# Step 4: Print the first few rows of one of the raster DataFrames
print(raster_dfs[0].head())  # This will print the first few rows of the first raster's DataFrame
