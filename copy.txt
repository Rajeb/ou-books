def compute(
    model_base_dataset,
    model_train,
    # model_test,
    # model_predict,
    vector_assembler,
):
    num_features = [
        "WIRE_ELEV",
        "GRND_ELEV",
        "VOLTAGE",
        "WIRE_LAT",
        "WIRE_LON",
        "X",
        "Y",
        "Z",
        "primary_fall_distance_fraction",
        "primary_perpendicular_fdf",
        "primary_perpendicular_s2w",
        "primary_front_row",
        "secondary_fall_distance_fraction",
        "secondary_s2w",
        "secondary_perpendicular_fdf",
        "secondary_perpendicular_s2w",
        "secondary_front_row",
        "tertiary_fall_distance_fraction",
        "tertiary_s2w",
        "tertiary_perpendicular_fdf",
        "tertiary_perpendicular_s2w",
        "tertiary_front_row",
        "actual_lat",
        "actual_long",
        "distance_of_tree_to_outage",
        "angle_to_outage",
        "tree_count",
        "weight_fraction",
        "iparenttreeid",
        "projyr",
    ]
    cat_features = [
        # "TREEID",
        # "year",
        # "wkt",
        # "outage_id",
        # "is_in_influence_area",
        # "dtworkdate",
        # "dtinspdate",
        # "bvoid",
        # "breadonly",
        "snotification",
        "strimcode",
        "nclearance",
        "trim_type",
        # "nlatitude",
        # "nlongitude",
        # "failure_flag_col",
    ]

    model_base_dataset = model_base_dataset.dataframe().fillna(
        value=-9999, subset=num_features
    )
    model_base_dataset = model_base_dataset.drop(
        "is_in_influence_area", "dtworkdate", "dtinspdate", "bvoid", "breadonly"
    )

    encoded_modeling_data, assembler = encode_dataset(
        model_base_dataset,
        categorical_col_names=cat_features,
        numeric_col_names=num_features,
        key_asset_attributes=None,
    )

    # drop NULL values in numerical features
    encoded_modeling_data = encoded_modeling_data.na.drop(subset=num_features)

