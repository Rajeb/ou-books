2024-07-15
0	{'fia': '100', 'rating': 'R2'}
1	{'fia': '105', 'rating': 'R2'}
2	{'fia': '112', 'rating': 'R4'}
3	{'fia': '113', 'rating': 'R3'}
4	{'fia': '115', 'rating': 'R3'}

url ="https://yb8oqn9m7d.internal.us-west-2.ss.pge.com/rating_on_fia_startdate/v1?start_date=20240715"

except requests.exceptions.RequestException as e:
    print(f"Error encountered: {e}")
url = “https://yb8oqn9m7d.internal.us-west-2.ss.pge.com/rating_on_fia_startdate/v1”
api_key = " ciMlnk2Bmp3rMDXtItRw24hVKPLySKmq8asLBYEb "
header = {"x-api-key": api_key}
response = requests.get(url=url, headers=header, verify=False)
fia_data = response.json()
print (fia_data)

############Climate data
def create_geometry(df, geometry_field):
    df = df.withColumn("geom", ST_GeomFromGeoJSON(geometry_field))
    df = df.withColumn("valid", ST_IsValid("geom"))
    df = df.filter(col("valid") == True).drop("valid")
    df = df.withColumn(
        "geom", ST_Transform("geom", lit("EPSG:4326"), lit("EPSG:32610"))
    )
    df = df.withColumn("geometry", ST_AsText("geom"))
    return df

def create_geometry(df, geometry_field):
    # Convert GeoJSON strings to geometries
    df['geometry'] = df[geometry_field].apply(lambda x: shape(x))
    
    # Create a GeoDataFrame
    gdf = gpd.GeoDataFrame(df, geometry='geometry')
    
    # Set the original CRS
    gdf.set_crs(epsg=4326, inplace=True)
    
    # Filter valid geometries
    gdf = gdf[gdf.is_valid]
    
    # Transform to a new CRS (EPSG:32610)
    gdf = gdf.to_crs(epsg=32610)
    
    # Convert geometries to WKT
    gdf['geometry'] = gdf['geometry'].apply(lambda geom: geom.wkt)
    
    return pd.DataFrame(gdf)

https://agupubs.onlinelibrary.wiley.com/doi/full/10.1029/2020JD033180
https://agupubs.onlinelibrary.wiley.com/doi/full/10.1029/2023JD039136


queryOverlap = """
        SELECT p.TREEID,p.wkt,tm.geometry as tm_geom, tm.value as mort_per, tm.pk_row_col
        FROM canopy_data as cp, tree_mortality_df as tm
        ST_Intersection(cp.wkt, mt.tm_geom)
        WHERE (ST_Intersects(ST_GeomFromWKT(cp.wkt), ST_GeomFromWKT(mt.tm_geom))
        """
edited
queryOverlap = """
    SELECT 
        cp.TREEID, 
        cp.wkt, 
        tm.geometry as tm_geom, 
        tm.value as mort_per, 
        tm.pk_row_col
    FROM 
        canopy_data as cp, 
        tree_mortality_df as tm
    WHERE 
        ST_Intersects(ST_GeomFromWKT(cp.wkt), ST_GeomFromWKT(tm.geometry))
    """


----------
transform(
    out=Output(
        "/PG&E/workflow_rada_dev/logic/TxCFO_models/datasets/vegetation/data_pipeline/raster_datasets/test1"
    ),
    tree_mortality_df=Input("ri.foundry.main.dataset.04a3e876-bc72-4acd-8fe8-b0815a4422f2"),
    canopy_data=Input("ri.foundry.main.dataset.86a4958b-bc33-491d-babd-d613dc6991cf")
)
def compute(ctx, out, tree_mortality_df, canopy_data):
    spark = ctx.spark_session
    SedonaRegistrator.registerAll(spark)
    canopy_data.registerTempTable("canopy_data")
    tree_mortality_df.registerTempTable("tree_mortality_df")
 
    queryOverlap = """
    SELECT
        cp.TREEID,
        cp.wkt,
        tm.geometry as tm_geom,
        tm.value as mort_per,
        tm.pk_row_col,
        AVG(tm.value) as avg_mort_per,
        ST_Intersection(ST_GeomFromWKT(cp.wkt), ST_GeomFromWKT(tm.geometry)) as intersection
    FROM
        canopy_data as cp, 
        tree_mortality_df as tm
    WHERE
        ST_Intersects(ST_GeomFromWKT(cp.wkt), ST_GeomFromWKT(tm.geometry))
    GROUP BY
    cp.TREEID
    """
    result_df =spark.sql(queryOverlap)
    out.write_dataframe(result_df)
