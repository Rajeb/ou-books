import pandas as pd
import plotly.graph_objects as go

# Sample DataFrame
data = {
    'outage_date': ['2024-09-15', '2024-09-16', '2024-09-16', '2024-09-17', '2024-09-18'],
    'ignition_date': ['2024-09-15', '2024-09-16', None, '2024-09-17', '2024-09-18'],
    'ignition_ind': [1, 1, 0, 1, 1]
}
df = pd.DataFrame(data)

# Convert the date columns to datetime format
df['outage_date'] = pd.to_datetime(df['outage_date'])
df['ignition_date'] = pd.to_datetime(df['ignition_date'])

# Count outages and ignitions per day
outage_count = df.groupby('outage_date').size().reset_index(name='outage_count')
ignition_count = df[df['ignition_ind'] == 1].groupby('ignition_date').size().reset_index(name='ignition_count')

# Combine both counts
daily_counts = pd.merge(outage_count, ignition_count, left_on='outage_date', right_on='ignition_date', how='outer').fillna(0)

import pandas as pd
import plotly.graph_objects as go

# Sample DataFrame
data = {
    'outage_date': ['2022-09-15', '2023-09-16', '2023-09-16', '2024-09-17', '2024-09-18'],
    'ignition_date': ['2022-09-15', '2023-09-16', None, '2024-09-17', '2024-09-18'],
    'ignition_ind': [1, 1, 0, 1, 1]
}
df = pd.DataFrame(data)

# Convert the date columns to datetime format
df['outage_date'] = pd.to_datetime(df['outage_date'])
df['ignition_date'] = pd.to_datetime(df['ignition_date'])

# Count outages and ignitions per day
outage_count_per_day = df.groupby('outage_date').size().reset_index(name='outage_count')
ignition_count_per_day = df[df['ignition_ind'] == 1].groupby('ignition_date').size().reset_index(name='ignition_count')

# Combine both counts
daily_counts = pd.merge(outage_count_per_day, ignition_count_per_day, left_on='outage_date', right_on='ignition_date', how='outer').fillna(0)

# Create stacked bar chart for each day
fig = go.Figure()

# Add outages as the first trace
fig.add_trace(go.Bar(
    x=daily_counts['outage_date'],
    y=daily_counts['outage_count'],
    name='Outages'
))

# Add ignitions as the second trace
fig.add_trace(go.Bar(
    x=daily_counts['outage_date'],
    y=daily_counts['ignition_count'],
    name='Ignitions'
))

# Update layout to stack the bars and format x-axis labels by month
fig.update_layout(
    barmode='stack',
    title='Outages and Ignitions per Day with X-axis as Month Labels',
    xaxis_title='Date',
    yaxis_title='Count',
    xaxis=dict(
        tickmode='array', 
        tickvals=pd.date_range(start=df['outage_date'].min(), end=df['outage_date'].max(), freq='MS'),
        tickformat='%Y-%m'  # Format x-axis labels as Year-Month
    ),
    template='plotly_white'
)

fig.show()



















# Create stacked bar chart
fig = go.Figure()

# Add outages as the first trace
fig.add_trace(go.Bar(
    x=daily_counts['outage_date'],
    y=daily_counts['outage_count'],
    name='Outages'
))

# Add ignitions as the second trace
fig.add_trace(go.Bar(
    x=daily_counts['outage_date'],
    y=daily_counts['ignition_count'],
    name='Ignitions'
))

# Update layout to stack the bars
fig.update_layout(
    barmode='stack',
    title='Outages and Ignitions per Day',
    xaxis_title='Date',
    yaxis_title='Count',
    xaxis=dict(tickformat='%Y-%m-%d'),
    template='plotly_white'
)

fig.show()






r3_failures_hf = r3_ignitions[((r3_ignitions['hftd']==1) | 
                         (r3_ignitions['hfra_v4_1']==1) | 
                         (r3_ignitions['hfra_add']==1) )]










fig, axs = plt.subplots(2,2, figsize=(12, 6), tight_layout=True)
# fig, ax1 = plt.subplots(figsize=(10, 4))
# plt.title('R3+ ignition to failures by month in HFRA/HFTD')
selected_years = [2015,2021,2022,2024]

for year in selected_years:
    f_c = failure_counts[failure_counts['year']==year].groupby('month')['failure_primary_key'].sum().to_dict()
    i_c = igntions_counts[igntions_counts['year']==year].groupby('month')['ignition_primary_key'].sum().to_dict()
    outage_to_ignition = []
    if year != 2024:
        end_month = 13
    else:
        end_month = 8
    for month in range(1, end_month):
        if defaultdict(int,f_c)[month] != 0:
            outage_to_ignition.append(round(defaultdict(int,i_c)[month]/defaultdict(int,f_c)[month],3))
        else:
            outage_to_ignition.append(0)
    axs[0,0].plot([i for i in range(1,end_month)], outage_to_ignition)

fig.suptitle("R3+ ignitions / R3+ failures by month in HFRA/HFTD", fontsize=12)
axs[0,0].set_ylabel('Ignition to failure ratio', fontsize=10)
axs[0,0].set_xlabel('month')
axs[0,0].set_title("All Failure types", fontsize=10)
axs[0,0].legend(selected_years, loc='upper right', fontsize=9)


for year in selected_years:
    f_c = failure_counts_bird[failure_counts_bird['year']==year].groupby('month')['failure_primary_key'].sum().to_dict()
    i_c = igntions_counts_bird[igntions_counts_bird['year']==year].groupby('month')['ignition_primary_key'].sum().to_dict()
    outage_to_ignition = []
    if year != 2024:
        end_month = 13
    else:
        end_month = 8
    for month in range(1, end_month):
        if defaultdict(int,f_c)[month] != 0:
            outage_to_ignition.append(round(defaultdict(int,i_c)[month]/defaultdict(int,f_c)[month],3))
        else:
            outage_to_ignition.append(0)
    axs[1,0].plot([i for i in range(1,end_month)], outage_to_ignition)

axs[1,0].set_ylabel('Ignition to failure ratio', fontsize=10)
axs[1,0].set_xlabel('month')
axs[1,0].set_title("Animal Failure types", fontsize=10)
axs[1,0].legend(selected_years, loc='upper right', fontsize=9)



















# Customize the primary x-axis and y-axis
ax1.set_xlabel('Day of Year', fontsize=14)
ax1.set_ylabel('Cumulative Count', fontsize=14)
ax1.set_title('Cumulative Bird Strikes per Selected Year by Day', fontsize=20)
ax1.legend(title='Year', fontsize=10, title_fontsize='12')
ax1.grid(True)

# Create a secondary x-axis
ax2 = ax1.secondary_xaxis('top', functions=(lambda x: x, lambda x: x))
ax2.xaxis.set_major_locator(MonthLocator())
ax2.xaxis.set_major_formatter(DateFormatter('%b'))
ax2.set_xlabel('Month', fontsize=14)

plt.tight_layout()
plt.show()










# Assuming df is your DataFrame
# Sample data creation (You can replace this with your actual DataFrame)
data = {'year': np.random.randint(2000, 2012, 100)}
df = pd.DataFrame(data)

# Count the occurrences per year
yearly_counts = df['year'].value_counts().sort_index()

# Create the plot
plt.figure(fi





import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Sample data creation (You can replace this with your actual DataFrame)
np.random.seed(0)
dates = pd.date_range(start='2000-01-01', end='2011-12-31', freq='D')
data = {'date': np.random.choice(dates, 1000)}
df = pd.DataFrame(data)

# Add 'year' and 'day_of_year' columns
df['date'] = pd.to_datetime(df['date'])
df['year'] = df['date'].dt.year
df['day_of_year'] = df['date'].dt.dayofyear

# Group by 'year' and 'day_of_year', then count the occurrences
daily_counts = df.groupby(['year', 'day_of_year']).size().reset_index(name='count')

# Calculate the cumulative count for each year
daily_counts['cumulative_count'] = daily_counts.groupby('year')['count'].cumsum()

# Plot the cumulative counts
plt.figure(figsize=(14, 10))

for year, group in daily_counts.groupby('year'):
    plt.plot(group['day_of_year'], group['cumulative_count'], label=year)

# Customize the plot
plt.xlabel('Day of Year', fontsize=14)
plt.ylabel('Cumulative Count', fontsize=14)
plt.title('Cumulative Bird Strikes per Year by Day', fontsize=20)
plt.legend(title='Year', fontsize=10, title_fontsize='12')
plt.grid(True)

plt.tight_layout()
plt.show()

